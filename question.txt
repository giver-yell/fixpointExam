
株式会社フィックスポイント 採用担当 <recruit@fixpoint.jobcan-ats.jp>

藤原　良平様

フィックスポイントの採用担当です。

早速ですが、下記にプログラミング試験をお送りいたします。
解答期限は本日より3日以内の
02月14日（月）10:00までにお願いいたします。

解答は、GitHubまたはbitbucketなどの
ソースコードを公開できるサービスをご利用いただき、
プログラムをアップロードしたURLを
こちらのメールにご返信ください。

※ソースコードを公開できるサービスの
アカウントをお持ちでない場合は、
お手数ですが、作成をお願いします。

問題に関するご質問にはお答えできませんが、
その他のご不明点がございましたら、
お問い合わせください。

=======================================
フィックスポイント プログラミング試験問題
=======================================
A社の監視システムでは、監視対象となる複数台のサーバに対して一定間隔でping応答確認を行っており、
確認結果は以下に示すカンマ区切りの形式で1行ずつ監視ログファイルに追記される。
-------------------------------------------------
＜確認日時＞,＜サーバアドレス＞,＜応答結果＞
-------------------------------------------------
確認日時は、YYYYMMDDhhmmssの形式。ただし、年＝YYYY（4桁の数字）、月＝MM（2桁の数字。以下同様）、日＝DD、時＝hh、分＝mm、秒＝ssである。
サーバアドレスは、ネットワークプレフィックス長付きのIPv4アドレスである。
応答結果には、pingの応答時間がミリ秒単位で記載される。ただし、タイムアウトした場合は"-"(ハイフン記号)となる。

以下に監視ログの例（抜粋）を示す。
-------------------------------------------------
20201019133124,10.20.30.1/16,2
20201019133125,10.20.30.2/16,1
20201019133134,192.168.1.1/24,10
20201019133135,192.168.1.2/24,5
20201019133224,10.20.30.1/16,522
20201019133225,10.20.30.2/16,1
20201019133234,192.168.1.1/24,8
20201019133235,192.168.1.2/24,15
20201019133324,10.20.30.1/16,-
20201019133325,10.20.30.2/16,2
-------------------------------------------------
設問1
監視ログファイルを読み込み、故障状態のサーバアドレスとそのサーバの故障期間を出力するプログラムを作成せよ。
出力フォーマットは任意でよい。
なお、pingがタイムアウトした場合を故障とみなし、最初にタイムアウトしたときから、次にpingの応答が返るまでを故障期間とする。
→作業手順
1.1. ログ読み込み
1.2. 故障を抽出
1.3. 故障期間を算出
1.4. 故障状態のサーバアドレスと故障期間をcsv出力

1.5. 連続でタイムアウトの対応
1.6. 最後がタイムアウトの対応
1.7. logが空の場合の対応
※サーバーの最後のタイムアウトはundefindで返す

[output例]
10.20.30.1/16, 2


設問2
ネットワークの状態によっては、一時的にpingがタイムアウトしても、一定期間するとpingの応答が復活することがあり、
そのような場合はサーバの故障とみなさないようにしたい。
N回以上連続してタイムアウトした場合にのみ故障とみなすように、設問1のプログラムを拡張せよ。
Nはプログラムのパラメータとして与えられるようにすること。
→作業手順
2.1. タイムアウト回数N をdefineで定義
define('TIME_OUT_COUNT', 3);
2.2. N回以上のみ故障にする条件追加

[output例]
10.20.30.1/16, 2


設問3
サーバが返すpingの応答時間が長くなる場合、サーバが過負荷状態になっていると考えられる。
そこで、直近m回の平均応答時間がtミリ秒を超えた場合は、サーバが過負荷状態になっているとみなそう。
設問2のプログラムを拡張して、各サーバの過負荷状態となっている期間を出力できるようにせよ。mとtはプログラムのパラメータとして与えられるようにすること。
→作業手順
3.1. 直近m回とtミリ秒をdefineで定義
// 直近m回
define('RECENT_PING', 5);
// 平均応答時間の制限tミリ秒
define('LIMIT_AVERAGE_RESPONSE_TIME', 10);

3.2. サーバーをkeyの配列を作成し、ログ（応答時間）を格納
例)
foreach ($log as $vals) {
    $logArr[$vals[1]][] = $vals[2];
}

3.3. 各サーバーの平均応答時間を算出
foreach ($logArr as $key => $vals) {
    $sumResponseTime = 0;
    $logCount = count($vals);
    // m回以上ログが来ていたら平均応答時間算出
    if ($logCount >= RECENT_PING) {
        for ($i = 1; $i < RECENT_PING; $i++) {
            $sumResponseTime += $vals[RECENT_PING - $i];
        }
        // 平均応答時間を算出（切り上げ）
        $averageResponseTime[$key] = ceil($sumResponseTime / RECENT_PING);
    } else {
        $count = 0;
        foreach ($vals as $val) {
            $sumResponseTime += $val;
            $count++
        }
        // 平均応答時間を算出（切り上げ）
        $averageResponseTime[$key] = ceil($sumResponseTime / $count);
    }
}

3.4. 平均応答時間の制限を超えていればcsv出力

3.5. - が混ざっている場合
3.6. 平均を取る値が全て - の場合


設問4
ネットワーク経路にあるスイッチに障害が発生した場合、そのスイッチの配下にあるサーバの応答がすべてタイムアウトすると想定される。
そこで、あるサブネット内のサーバが全て故障（ping応答がすべてN回以上連続でタイムアウト）している場合は、
そのサブネット（のスイッチ）の故障とみなそう。
設問2または3のプログラムを拡張して、各サブネット毎にネットワークの故障期間を出力できるようにせよ。
→作業手順
4.1. defineでNを定義 → 2と共通
4.2. defineでサブネットマスクを定義
https://www.ahref.org/doc/ipsubnet.html
define('SUB_NET_MASK_LIST' [
    8  => '255.0.0.0',
    9  => '255.128.0.0',
    10 => '255.192.0.0',
    11 => '255.224.0.0',
    12 => '255.240.0.0',
    13 => '255.248.0.0',
    14 => '255.252.0.0',
    15 => '255.254.0.0',
    16 => '255.255.0.0',
    17 => '255.255.128.0',
    18 => '255.255.192.0',
    19 => '255.255.224.0',
    20 => '255.255.240.0',
    21 => '255.255.248.0',
    22 => '255.255.252.0',
    23 => '255.255.254.0',
    24 => '255.255.255.0',
    25 => '255.255.255.128',
    26 => '255.255.255.192',
    27 => '255.255.255.224',
    28 => '255.255.255.240',
    29 => '255.255.255.248',
    30 => '255.255.255.252',
    31 => '255.255.255.254',
    32 => '255.255.255.255',
]);
4.3. プレフィックス長を見てサブネットマスクをketとした配列を作成
['sub_net_mask' => 'resp_time]
4.4. サブネット毎にN回以上連続でタイムアウトした場合、csv出力

[output例]
255.255.255.0, 2

※解答をする上での注意
設問では明示しきれていない細かな仕様については、各自、妥当な範囲で補ってよい。
プログラムの実行方法や内容を説明するドキュメントも作成すること。
→README.md へ記載する
作成したプログラムはテストを行い、使用したテストデータと結果についても合わせて提出すること。
→テスト結果のcsv作成

============================================
以上となります。

それでは、02月14日（月）10:00までに
・プログラミング試験の解答URL
のご提出をお待ちしております。

どうぞよろしくお願いいたします。

フィックスポイント　採用担当
